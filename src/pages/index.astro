---

---

<html lang="en" class="min-h-screen">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>QR | HACK</title>
	</head>
	<body class="min-h-screen">
		<div class="flex min-h-screen items-center justify-center">
			<div
				class="flex flex-grow flex-col items-center justify-center gap-8 px-8 pt-12 lg:flex-row lg:pt-0"
			>
				<div class="grid flex-grow grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
					<!-- Text input -->
					<div class="col-span-full">
						<label for="text" class="block text-sm/6 font-medium text-gray-900"
							>Text</label
						>
						<div class="mt-2">
							<textarea
								name="text"
								id="text"
								placeholder="https://example.com"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm/6"
							></textarea>
						</div>
					</div>

					<!-- Size input -->
					<div class="col-span-full">
						<label for="text" class="block text-sm/6 font-medium text-gray-900"
							>Size (px)</label
						>
						<div class="mt-2">
							<input
								type="text"
								name="size"
								id="size"
								placeholder="512"
								inputmode="numeric"
								pattern="[0-9]+"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm/6"
							/>
						</div>
					</div>

					<!-- Size Presets -->
					<!-- 512x512 -->
					<div class="sm:col-span-2 sm:col-start-1">
						<button
							id="size-512"
							class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
							>512</button
						>
					</div>
					<!-- 1024x1024 -->
					<div class="sm:col-span-2">
						<button
							id="size-1024"
							class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
							>1024</button
						>
					</div>
					<!-- 2048x2048 -->
					<div class="sm:col-span-2">
						<button
							id="size-2048"
							class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
							>2048</button
						>
					</div>

					<!-- Border input -->
					<div class="sm:col-span-2">
						<label for="text" class="block text-sm/6 font-medium text-gray-900"
							>Border</label
						>
						<div class="mt-2">
							<input
								type="text"
								name="border"
								id="border"
								placeholder="2"
								inputmode="numeric"
								pattern="[0-9]+"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm/6"
							/>
						</div>
					</div>

					<!-- White color input -->
					<div class="sm:col-span-2">
						<label for="text" class="block text-sm/6 font-medium text-gray-900"
							>Background</label
						>
						<div class="mt-2">
							<input
								type="color"
								name="white-color"
								id="white-color"
								value="#ffffff"
								class="block h-9 w-full cursor-pointer rounded-md border-0 border-gray-200 bg-white p-1 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600"
							/>
						</div>
					</div>
					<!-- Black color input -->
					<div class="sm:col-span-2">
						<label for="text" class="block text-sm/6 font-medium text-gray-900"
							>Foreground</label
						>
						<div class="mt-2">
							<input
								type="color"
								name="black-color"
								id="black-color"
								value="#000000"
								class="block h-9 w-full cursor-pointer rounded-md border-0 border-gray-200 bg-white p-1 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600"
							/>
						</div>
					</div>

					<!-- Download SVG -->
					<div class="sm:col-span-3">
						<button
							id="download-svg"
							class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
							>Download SVG</button
						>
					</div>
					<!-- Download PNG -->
					<div class="sm:col-span-3">
						<button
							id="download-png"
							class="w-full rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
							>Download PNG</button
						>
					</div>
				</div>
				<div class="h-full max-h-[512px] w-full max-w-[512px]">
					<div id="output"></div>
				</div>
			</div>
		</div>
	</body>

	<script>
		import { renderSVG } from "uqr";
		import type { QrCodeGenerateSvgOptions } from "uqr";

		const outputDiv = document.querySelector("#output") as HTMLDivElement;
		const textInput = document.querySelector("#text") as HTMLInputElement;
		const sizeInput = document.querySelector("#size") as HTMLInputElement;
		const preset512 = document.querySelector("#size-512") as HTMLButtonElement;
		const preset1024 = document.querySelector(
			"#size-1024",
		) as HTMLButtonElement;
		const preset2048 = document.querySelector(
			"#size-2048",
		) as HTMLButtonElement;
		const borderInput = document.querySelector("#border") as HTMLInputElement;
		const whiteColorInput = document.querySelector(
			"#white-color",
		) as HTMLInputElement;
		const blackColorInput = document.querySelector(
			"#black-color",
		) as HTMLInputElement;
		const downloadSvgButton = document.querySelector(
			"#download-svg",
		) as HTMLButtonElement;
		const downloadPngButton = document.querySelector(
			"#download-png",
		) as HTMLButtonElement;

		let svgContent = "";
		let input = "";
		const renderOptions: QrCodeGenerateSvgOptions = {
			border: 2,
		};
		let size = 128;

		function updateSvg() {
			const string = renderSVG(input, renderOptions);
			if (outputDiv) {
				outputDiv.innerHTML = string;
				svgContent = string;
			}
		}
		updateSvg();

		textInput.addEventListener("input", (e) => {
			const target = e.target as HTMLInputElement;
			input = target.value;
			updateSvg();
		});

		sizeInput.addEventListener("beforeinput", (e) => {
			const target = e.target as HTMLInputElement;
			const beforeValue = target.value;
			target.addEventListener(
				"input",
				(e2) => {
					if (target.validity.patternMismatch) {
						target.value = beforeValue;
					}
					const target2 = e2.target as HTMLInputElement;
					size = parseInt(target2.value);
				},
				{ once: true },
			);
		});
		borderInput.addEventListener("beforeinput", (e) => {
			const target = e.target as HTMLInputElement;
			const beforeValue = target.value;
			target.addEventListener(
				"input",
				(e2) => {
					if (target.validity.patternMismatch) {
						target.value = beforeValue;
					}
					const target2 = e2.target as HTMLInputElement;
					renderOptions.border = parseInt(target2.value);
					updateSvg();
				},
				{ once: true },
			);
		});

		whiteColorInput.addEventListener("input", (e) => {
			const target = e.target as HTMLInputElement;
			renderOptions.whiteColor = target.value;
			updateSvg();
		});
		blackColorInput.addEventListener("input", (e) => {
			const target = e.target as HTMLInputElement;
			renderOptions.blackColor = target.value;
			updateSvg();
		});

		preset512.addEventListener("click", () => {
			sizeInput.value = "512";
			size = 512;
		});
		preset1024.addEventListener("click", () => {
			sizeInput.value = "1024";
			size = 1024;
		});
		preset2048.addEventListener("click", () => {
			sizeInput.value = "2048";
			size = 2048;
		});

		// Download SVG
		downloadSvgButton.addEventListener("click", () => {
			if (!svgContent) return;
			const blob = new Blob([svgContent], { type: "image/svg+xml" });
			const url = URL.createObjectURL(blob);
			const link = document.createElement("a");
			link.href = url;
			link.download = "qr-code.svg";
			link.click();
			URL.revokeObjectURL(url);
		});

		// download PNG
		downloadPngButton.addEventListener("click", () => {
			if (!svgContent) return;

			const canvas = document.createElement("canvas");
			const context = canvas.getContext("2d");
			const img = new Image();

			canvas.width = canvas.height = size;

			img.onload = () => {
				if (!context) return;
				context.drawImage(img, 0, 0, canvas.width, canvas.height);
				canvas.toBlob((blob) => {
					if (!blob) return;
					const url = URL.createObjectURL(blob);
					const link = document.createElement("a");
					link.href = url;
					link.download = "qr-code.png";
					link.click();
					URL.revokeObjectURL(url);
				}, "image/png");
			};

			// set the image source to the SVG data URL
			img.src = "data:image/svg+xml;base64," + btoa(svgContent);
		});
	</script>
</html>
